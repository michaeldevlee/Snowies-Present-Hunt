[gd_scene load_steps=15 format=2]

[ext_resource path="res://Interactables/Base Interactable/Base_Interactable.tscn" type="PackedScene" id=1]
[ext_resource path="res://Dialogue.gd" type="Script" id=2]
[ext_resource path="res://Interactables/Fire Place/Fire Place Sprite Sheet.png" type="Texture" id=3]

[sub_resource type="Resource" id=1]
resource_local_to_scene = true
script = ExtResource( 2 )
dialogue_text = [ "\"this is a basic interactable" ]
dialogue_text_interacted = [ "\"already visisted the base\"" ]
is_already_visited = false
gesture_completed = false

[sub_resource type="Shader" id=2]
code = "shader_type canvas_item;

uniform vec4 color : hint_color = vec4(1.0);
uniform float width : hint_range(0, 10) = 1.0;
uniform int pattern : hint_range(0, 2) = 0; // diamond, circle, square
uniform bool inside = false;
uniform bool add_margins = true; // only useful when inside is false

void vertex() {
	if (add_margins) {
		VERTEX += (UV * 2.0 - 1.0) * width;
	}
}

bool hasContraryNeighbour(vec2 uv, vec2 texture_pixel_size, sampler2D texture) {
	for (float i = -ceil(width); i <= ceil(width); i++) {
		float x = abs(i) > width ? width * sign(i) : i;
		float offset;
		
		if (pattern == 0) {
			offset = width - abs(x);
		} else if (pattern == 1) {
			offset = floor(sqrt(pow(width + 0.5, 2) - x * x));
		} else if (pattern == 2) {
			offset = width;
		}
		
		for (float j = -ceil(offset); j <= ceil(offset); j++) {
			float y = abs(j) > offset ? offset * sign(j) : j;
			vec2 xy = uv + texture_pixel_size * vec2(x, y);
			
			if ((xy != clamp(xy, vec2(0.0), vec2(1.0)) || texture(texture, xy).a == 0.0) == inside) {
				return true;
			}
		}
	}
	
	return false;
}

void fragment() {
	vec2 uv = UV;
	
	if (add_margins) {
		vec2 texture_pixel_size = vec2(1.0) / (vec2(1.0) / TEXTURE_PIXEL_SIZE + vec2(width * 2.0));
		
		uv = (uv - texture_pixel_size * width) * TEXTURE_PIXEL_SIZE / texture_pixel_size;
		
		if (uv != clamp(uv, vec2(0.0), vec2(1.0))) {
			COLOR.a = 0.0;
		} else {
			COLOR = texture(TEXTURE, uv);
		}
	} else {
		COLOR = texture(TEXTURE, uv);
	}
	
	if ((COLOR.a > 0.0) == inside && hasContraryNeighbour(uv, TEXTURE_PIXEL_SIZE, TEXTURE)) {
		COLOR.rgb = inside ? mix(COLOR.rgb, color.rgb, color.a) : color.rgb;
		COLOR.a += (1.0 - COLOR.a) * color.a;
	}
}"

[sub_resource type="ShaderMaterial" id=3]
resource_local_to_scene = true
shader = SubResource( 2 )
shader_param/color = Color( 1, 1, 1, 1 )
shader_param/width = 0.0
shader_param/pattern = 0
shader_param/inside = false
shader_param/add_margins = true

[sub_resource type="SpriteFrames" id=9]
resource_local_to_scene = true
animations = [ {
"frames": [  ],
"loop": true,
"name": "default",
"speed": 7.0
} ]

[sub_resource type="Animation" id=16]
resource_name = "Fire Place"
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath(".:frame")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.2, 0.4, 0.6, 0.8 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ 0, 1, 2, 3, 4 ]
}

[sub_resource type="RectangleShape2D" id=10]
resource_local_to_scene = true
extents = Vector2( 62, 39 )

[sub_resource type="Animation" id=11]
resource_local_to_scene = true
resource_name = "Gesture Feedback"
length = 0.8
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray(  ),
"transitions": PoolRealArray(  ),
"update": 1,
"values": [  ]
}

[sub_resource type="Animation" id=12]
resource_local_to_scene = true

[sub_resource type="Animation" id=13]
resource_local_to_scene = true
resource_name = "Idle"
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:frame")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray(  ),
"transitions": PoolRealArray(  ),
"update": 1,
"values": [  ]
}

[sub_resource type="Animation" id=14]
resource_local_to_scene = true
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray(  ),
"transitions": PoolRealArray(  ),
"update": 0,
"values": [  ]
}

[sub_resource type="Animation" id=15]
resource_local_to_scene = true

[node name="Fire Place" instance=ExtResource( 1 )]
dialogue_resource = SubResource( 1 )

[node name="Sprite" parent="." index="1"]
material = SubResource( 3 )
frames = SubResource( 9 )

[node name="Sprite2" type="Sprite" parent="." index="2"]
texture = ExtResource( 3 )
hframes = 5
frame = 2

[node name="AnimationPlayer" type="AnimationPlayer" parent="Sprite2" index="0"]
autoplay = "Fire Place"
"anims/Fire Place" = SubResource( 16 )

[node name="CollisionShape2D" parent="Interact Area" index="0"]
position = Vector2( 1.5, 54 )
shape = SubResource( 10 )

[node name="CPUParticles2D" type="CPUParticles2D" parent="." index="5"]
position = Vector2( -12.1406, 45.3709 )
amount = 3
lifetime = 3.0
direction = Vector2( 0, -1 )
spread = 20.0
gravity = Vector2( 0, 0 )
initial_velocity = 10.0

[node name="CPUParticles2D2" type="CPUParticles2D" parent="." index="6"]
position = Vector2( 9.00388, 28.4986 )
amount = 2
lifetime = 3.0
direction = Vector2( 0, -1 )
spread = 20.0
gravity = Vector2( 0, 0 )
initial_velocity = 10.0

[node name="CPUParticles2D3" type="CPUParticles2D" parent="." index="7"]
position = Vector2( 24.7207, 42.683 )
amount = 2
lifetime = 3.0
direction = Vector2( 0, -1 )
spread = 20.0
gravity = Vector2( 0, 0 )
initial_velocity = 10.0

[node name="Animation Player" parent="." index="8"]
"anims/Gesture Feedback" = SubResource( 11 )
"anims/Hover Animation" = SubResource( 12 )
anims/Idle = SubResource( 13 )
anims/Interact = SubResource( 14 )
anims/Transition = SubResource( 15 )
